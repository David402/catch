<html>
<head>
	<title>WebRTC</title>
	
	<script src="/utils.js"></script>
	
	<style>
	video {
		 
	}
	
	.remote-video {
	  transform: rotateY(180deg);
      -webkit-transform:rotateY(180deg);
      -moz-transform:rotateY(180deg);
    }
	</style>
</head>
<body>
	<h1>Hello World</h1>
	<video id="localvideo"></video>

<script type="text/javascript">

if (navigator.mozGetUserMedia) {
  navigator.getUserMedia = navigator.mozGetUserMedia;
  RTCPeerConnection = mozRTCPeerConnection;
  RTCSessionDescription = mozRTCSessionDescription;
  RTCIceCandidate = mozRTCIceCandidate;
} else {
  navigator.getUserMedia = navigator.webkitGetUserMedia;
  RTCPeerConnection = webkitRTCPeerConnection;
}

var myToken = "1111";
var controllerData = {"Room":"rncLompg"};
console.log("controllerData", controllerData);
var room = controllerData["Room"];

// David, send signal/message to server
//
function sendSignal(destinations, message) {
  var body = JSON.stringify(message);
  var data = {"destinations": destinations, "body": body}
  console.log('C->S: ', data);

  var xhr = new XMLHttpRequest();
  xhr.open('POST', '/webrtc/signal/transmitter', true);
  xhr.send(JSON.stringify(data));
}

// RTC connection methods
//
var g_RTCPeerConnections = {};

function newRTCPeerConnection() {
  var pc_config = {"iceServers": [{"url": "stun:stun.l.google.com:19302"}]};
  var constraints = {"optional": [{"DtlsSrtpKeyAgreement": true}]}; 
  return new RTCPeerConnection(pc_config, constraints);
}

function preparePeerConnection(myToken, token, onaddstream) {
  
  console.log("[preparePeerConnection] token: ", token);

  var onicecandidate = function(evt) {

    console.log("onicecandidate evt: ", evt);

    if (!evt.candidate){
      return;
    } 
    var msg = {"from": myToken,
               "type": "icecandidate",
               "candidate": evt.candidate.candidate,
               "sdpMLineIndex": evt.candidate.sdpMLineIndex,
               "sdpMid": evt.candidate.sdpMid};
    sendSignal([token], msg);
  };
  
  var pc = newRTCPeerConnection();
  pc.onicecandidate = onicecandidate;
  pc.onaddstream = function(evt){ onaddstream(token, evt); };
  g_RTCPeerConnections[token] = pc;
  return pc;
}

// David, main RTC handler for all RTC events
//
function rtcSignalHandler(myToken, evt) {
  var msg = JSON.parse(evt.data);
  console.log(msg);
  var pc = g_RTCPeerConnections[msg.from];
    
  if (msg.type == "answer") {

    if (!pc) { 
      console.log("Peer connection is invalid!!!");
      return; 
    }
    pc.setRemoteDescription(new RTCSessionDescription(msg.sessionDescription));
      
  } else if (msg.type == "icecandidate") {

    if (!pc) { 
      console.log("[rtcSignalHandler] handle icecandidate -> peer connection is invalid");
      return; 
    }
    var candidate = new RTCIceCandidate({"candidate": msg.candidate,
                                         "sdpMLineIndex": msg.sdpMLineIndex});
    pc.addIceCandidate(candidate);
      
  } else if (msg.type == "bye") {
    
    onRemoteHangup(msg.from);

  } else {

    console.log("Unknown message: ", msg);

  }
}

function genVideoId(token) {
  return "video-" + token;
}

function playVideo(video) {
  setTimeout(function(){ video.play() }, 1000);
}

// David, add remote sender stream
//
function onAddRemoteStream(token, evt){

  console.log("[onAddRemoteStream] evt: ", evt);
  console.log("token: ", token);

  // window.localMediaStream = localMediaStream;
  var video = document.querySelector("#localvideo");
  video.muted = true; 
  video.src = window.URL.createObjectURL(evt.stream);
  playVideo(video);

  // var remotevideo = document.createElement("video");
  // remotevideo.id = genVideoId(token);
  // remotevideo.src = URL.createObjectURL(evt.stream);
  // playVideo(remotevideo);
  
  // remotevideo.style.width = "100%";
  // remotevideo.classList.add("remote-video")
  
  // localvideo = document.querySelector("#localvideo");
  // localvideo.parentNode.insertBefore(remotevideo, localvideo);
};

// David, may be used to handle remote transmitter hangup
//
function onRemoteHangup(token) {
  var remotevideo = document.querySelector("#" + genVideoId(token));
  if (remotevideo) {
    remotevideo.parentNode.removeChild(remotevideo);
  }
  
  if (g_RTCPeerConnections[token]) {
    g_RTCPeerConnections[token].close();
    delete g_RTCPeerConnections[token];
  }
}

function createSignalChannel() {
  var source = new EventSource("/webrtc/signal/receiver");
  var onMessage = function(evt){
      rtcSignalHandler(myToken, evt);
  };
  source.onmessage = onMessage;
  source.addEventListener("message", onMessage);
  window.onbeforeunload = function(e){
    postHTTP("/webrtc/signal/leave_source",
             {"token": myToken},
             function(data){ console.log(data); },
             false 
             );
  };
  return source;
}

function requestVideo() {

  // create signal channel
  createSignalChannel();

  var senderToken = "1234";
  // create 'offer' for requesting remote stream
  var pc = g_RTCPeerConnections[senderToken];
    
  if (!pc) {
    pc = preparePeerConnection(myToken, senderToken, onAddRemoteStream);
  }
  // pc.setRemoteDescription(new RTCSessionDescription(msg.sessionDescription));
  var offerSuccessCallback = function(sessionDescription) {

    console.log("[offerSuccessCallback] sessionDescription: " + sessionDescription);

    pc.setLocalDescription(sessionDescription,
                           function(evt){},
                           function(err){ console.log(err); });
    var msg = {"from": myToken,
               "type": "offer",
               "sessionDescription": sessionDescription};
    sendSignal([senderToken], msg);
  };
  var sdpc = {"mandatory": {
                "OfferToReceiveAudio":true,
                "OfferToReceiveVideo":true }};
  pc.createOffer(offerSuccessCallback,
                 function(err){ console.log(err); },
                 sdpc);
}

// Main code start from here...
//
requestVideo();

</script>

</body>
</html>